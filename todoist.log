2019-01-02 06:24:09 >>> server http://127.0.0.1:3000/
2019-01-02 06:24:11 >>> client 127.0.0.1:58232
2019-01-02 06:24:11 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:11 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>
</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>
    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:24:11 >>> client 127.0.0.1:58233
2019-01-02 06:24:14 >>> client 127.0.0.1:58234
2019-01-02 06:24:14 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3000/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:14 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>注册</title>
</head>
<body>
    <h1>注册表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signup">注册</button>
    </div>

    <div id="id-div-signup-result"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signup()
    }

    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:24:14 >>> client 127.0.0.1:58235
2019-01-02 06:24:14 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:14 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:14 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:24:14 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:24:19 >>> client 127.0.0.1:58236
2019-01-02 06:24:19 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'content-length': '35', 'origin': 'http://127.0.0.1:3000', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'aaa', 'password': '123'})
</request>

2019-01-02 06:24:19 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 1, "created_time": 1546410259, "updated_time": 1546410259, "username": "aaa", "password": "32ea32e793a5f4620ec30f14c0d5878368ef22f169e9ddb3e8a9870411266c22"}")
    ("data"): (b'')
</response>

2019-01-02 06:24:22 >>> client 127.0.0.1:58237
2019-01-02 06:24:22 >>> client 127.0.0.1:58238
2019-01-02 06:24:22 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:22 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>登录</title>
</head>
<body>
    <h1>登录表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signin">登录</button>
    </div>

    <div id="id-div-signin-result"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signin()
    }
    
    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:24:22 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:22 >>> client 127.0.0.1:58239
2019-01-02 06:24:22 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:24:22 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:24:22 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:24:30 >>> client 127.0.0.1:58240
2019-01-02 06:24:30 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'content-length': '35', 'origin': 'http://127.0.0.1:3000', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'aaa', 'password': '123'})
</request>

2019-01-02 06:24:30 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("body"): ("{"id": 1, "created_time": 1546410259, "updated_time": 1546410259, "username": "aaa", "password": "32ea32e793a5f4620ec30f14c0d5878368ef22f169e9ddb3e8a9870411266c22"}")
    ("data"): (b'')
</response>

2019-01-02 06:24:33 >>> client 127.0.0.1:58241
2019-01-02 06:24:33 >>> client 127.0.0.1:58242
2019-01-02 06:24:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/todo/index")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=8770082b-a737-44d0-9bff-8c741938e669'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("data"): (b'')
</request>

2019-01-02 06:24:33 >>> current user key 8770082b-a737-44d0-9bff-8c741938e669
2019-01-02 06:24:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>todo index</title>
    <link rel="stylesheet" href="/static?filename=todo.css">
</head>
<body>
    <main>
        <div id="id-div-todo-add-form">
            <input type="text" id="id-input-todo-content" placeholder="输入 todo 按回车添加">
        </div>

        <div id="id-div-todo-list">
        </div>
    </main>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=todo.js"></script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:24:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.css'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/css,*/*;q=0.1', 'referer': 'http://127.0.0.1:3000/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=8770082b-a737-44d0-9bff-8c741938e669'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("data"): (b'')
</request>

2019-01-02 06:24:33 >>> client 127.0.0.1:58243
2019-01-02 06:24:33 >>> client 127.0.0.1:58244
2019-01-02 06:24:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=8770082b-a737-44d0-9bff-8c741938e669'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("data"): (b'')
</request>

2019-01-02 06:24:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/css'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b'main {\n    width: 50rem;\n    margin: auto;\n}\n\ndiv {\n    padding: 0.3rem;\n    margin: 0.3rem;\n}\n\n#id-div-todo-add-form {\n    text-align: center;\n}\n\n#id-input-todo-content {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    border: 1px solid #e2a8e4;\n    border-radius: 0.5rem;\n}\n\n#id-div-todo-list {\n    display: flex;\n    flex-flow: column wrap;\n}\n\n.todo-item {\n    display: flex;\n    border: 1px solid lightblue;\n    flex-flow: row wrap;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n    background: white;\n    cursor: pointer;\n}\n\n.todo-delete, .todo-edit, .todo-update, .todo-cancle-update {\n    color: #4a4a4a;\n    font-size: 1.5rem;\n}\n\n.todo-delete:hover, .todo-edit:hover, .todo-update:hover, .todo-cancle-update:hover {\n    color: white;\n    background: #fb886e;\n}\n\n.todo-content {\n    color: #cb1b45;\n    font-size: 1.5rem;\n}')
</response>

2019-01-02 06:24:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=8770082b-a737-44d0-9bff-8c741938e669'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("data"): (b'')
</request>

2019-01-02 06:24:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:24:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b'const todoApi = {}\n\ntodoApi.add = (content, callback) => {\n    const todo = {\n        content: content\n    }\n    const path = \'/api/todo/add\'\n    postJSONRequest(path, todo, callback)\n}\n\ntodoApi.all = callback => {\n    const path = \'/api/todo/all\'\n    getJSONRequest(path, callback)\n}\n\ntodoApi.delete = (id, callback) => {\n    const path = `/api/todo/delete?id=${id}`\n    getJSONRequest(path, callback)\n}\n\ntodoApi.update = (id, content, callback) => {\n    const path = \'/api/todo/update\'\n    const todo = {\n        id: id,\n        content: content,\n    }\n\n    postJSONRequest(path, todo, callback)\n}\n\nconst todoView = {}\n\nconst templateTodo = (todo) => {\n    const t = `\n        <div class="todo-item" data-id="${todo.id}" data-content="${todo.content}">\n            <button class="todo-delete">\xe5\x88\xa0\xe9\x99\xa4</button>\n            <button class="todo-edit">\xe7\xbc\x96\xe8\xbe\x91</button>\n            <div class="todo-created-time">${dateTime(todo.created_time)}</div>\n            <div class="todo-content">${todo.content}</div>\n        </div>\n    `\n    return t\n}\n\ntodoView.add = (todo) => {\n    const html = templateTodo(todo)\n    appendHTML(\'#id-div-todo-list\', html)\n}\n\ntodoView.all = (todos) => {\n    for (const todo of todos) {\n        todoView.add(todo)\n    }\n}\n\ntodoView.delete = (todoItem) => {\n    todoItem.remove()\n}\n\nconst todoEvent = {}\n\ntodoEvent.add = () => {\n    bind(\'#id-input-todo-content\', \'keypress\', event => {\n        if (event.key == \'Enter\') {\n            const self = event.target\n            const content = self.value\n            todoApi.add(content, todo => todoView.add(todo))\n        }\n    })\n}\n\ntodoEvent.all = () => {\n    bind(document, \'DOMContentLoaded\', event => {\n        todoApi.all(todos => todoView.all(todos))\n    })\n}\n\ntodoEvent.delete = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-delete\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const id = todoItem.dataset.id\n        todoApi.delete(id, todo => {\n            todoView.delete(todoItem)\n        })\n    })\n}\n\nconst templateTodoUpdateForm = content => {\n    const t = `\n        <div class="todo-update-form">\n            <input type="text" class="todo-content" value="${content}">\n            <button class="todo-cancle-update">\xe5\x8f\x96\xe6\xb6\x88</button>\n            <button class="todo-update">\xe6\x9b\xb4\xe6\x96\xb0</button>\n        </div>\n    `\n    return t\n}\n\ntodoEvent.edit = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-edit\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoContentDiv = e(\'div.todo-content\', todoItem)\n        if (todoContentDiv != null) {\n            const html = templateTodoUpdateForm(content)\n            replaceHTML(todoContentDiv, html)\n        } else {\n            log(\'\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe7\x82\xb9\xe5\x87\xbb\xe7\xbc\x96\xe8\xbe\x91\xe6\x8c\x89\xe9\x92\xae\')\n        }\n    })\n}\n\nconst templateTodoContent = content => {\n    const t = `<div class="todo-content">${content}</div>`\n    return t\n}\n\ntodoEvent.cancleUpdate = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-cancle-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoUpdateForm = e(\'.todo-update-form\', todoItem)\n        const html = templateTodoContent(content)\n        replaceHTML(todoUpdateForm, html)\n    })\n}\n\ntodoEvent.update = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const contentInput = e(\'.todo-content\', todoItem)\n        const content = contentInput.value\n        const id = Number(todoItem.dataset.id)\n\n        todoApi.update(id, content, todo => {\n            const html = templateTodo(todo)\n            replaceHTML(todoItem, html)\n        })\n    })\n}\n\ntodoEvent.init = () => {\n    todoEvent.add()\n    todoEvent.all()\n    todoEvent.delete()\n    todoEvent.edit()\n    todoEvent.cancleUpdate()\n    todoEvent.update()\n}\n\nconst __main__ = () => {\n    todoEvent.init()\n}\n\n__main__()')
</response>

2019-01-02 06:24:33 >>> client 127.0.0.1:58245
2019-01-02 06:24:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/api/todo/all")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=8770082b-a737-44d0-9bff-8c741938e669'})
    ("cookie"): ({'key': '8770082b-a737-44d0-9bff-8c741938e669'})
    ("data"): (b'')
</request>

2019-01-02 06:24:33 >>> current user key 8770082b-a737-44d0-9bff-8c741938e669
2019-01-02 06:24:33 >>> current user key 8770082b-a737-44d0-9bff-8c741938e669
2019-01-02 06:24:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("[]")
    ("data"): (b'')
</response>

2019-01-02 06:32:58 >>> server http://127.0.0.1:3000/
2019-01-02 06:32:59 >>> client 127.0.0.1:58300
2019-01-02 06:32:59 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:32:59 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>
</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:33:00 >>> client 127.0.0.1:58301
2019-01-02 06:33:04 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3000/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:04 >>> client 127.0.0.1:58302
2019-01-02 06:33:04 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>注册</title>
</head>
<body>
    <h1>注册表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signup">注册</button>
    </div>

    <div id="id-div-signup-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
        <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signup()
    }

    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:33:04 >>> client 127.0.0.1:58303
2019-01-02 06:33:04 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:04 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:04 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:33:04 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:33:23 >>> client 127.0.0.1:58374
2019-01-02 06:33:23 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'content-length': '35', 'origin': 'http://127.0.0.1:3000', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'gua', 'password': '123'})
</request>

2019-01-02 06:33:23 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 2, "created_time": 1546410803, "updated_time": 1546410803, "username": "gua", "password": "32ea32e793a5f4620ec30f14c0d5878368ef22f169e9ddb3e8a9870411266c22"}")
    ("data"): (b'')
</response>

2019-01-02 06:33:26 >>> client 127.0.0.1:58387
2019-01-02 06:33:26 >>> client 127.0.0.1:58388
2019-01-02 06:33:26 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3000/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:26 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>登录</title>
</head>
<body>
    <h1>登录表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signin">登录</button>
    </div>

    <div id="id-div-signin-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signin()
    }
    
    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:33:26 >>> client 127.0.0.1:58389
2019-01-02 06:33:26 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:26 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:33:26 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3000/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:26 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:33:51 >>> client 127.0.0.1:58490
2019-01-02 06:33:51 >>> client 127.0.0.1:58491
2019-01-02 06:33:51 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:33:51 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>
</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:34:29 >>> client 127.0.0.1:58635
2019-01-02 06:34:29 >>> client 127.0.0.1:58636
2019-01-02 06:34:29 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3000', 'connection': 'keep-alive', 'cache-control': 'max-age=0', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:34:29 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>
</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:36:00 >>> server http://127.0.0.1:3001/
2019-01-02 06:36:01 >>> client 127.0.0.1:59048
2019-01-02 06:36:01 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:36:01 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>
        <link rel="stylesheet" href="/static?filename=todo.css">

</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:36:01 >>> client 127.0.0.1:59049
2019-01-02 06:36:02 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.css'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/css,*/*;q=0.1', 'referer': 'http://127.0.0.1:3001/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:36:02 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/css'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"main {\n    width: 50rem;\n    margin: auto;\n}\n\n.background {\n    position: absolute;\n    top: 0;\n    z-index: -1;\n    background: url('../img/1.jpg');\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n}\n\n.colck {\n    color: white;\n    position: fixed;\n    width: 15%;\n    height: 30%;\n    border: 2px dotted white;\n    border-radius: 50%;\n    top: 3%;\n    left: 4%;\n    text-shadow:0 0 0.2em white;\n}\n\n.time {\n    position: absolute;\n    left: 50%;\n    top: 45%;\n    transform: translateX(-50%);\n    font-size: 42px;\n    text-shadow:0 0 0.2em white;\n}\n\n\ndiv {\n    padding: 0.3rem;\n    margin: 0.3rem;\n}\n\n#id-div-todo-add-form {\n    text-align: center;\n}\n\n#id-input-todo-content {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    border: 1px solid #e2a8e4;\n    border-radius: 0.5rem;\n}\n\n#id-div-todo-list {\n    display: flex;\n    flex-flow: column wrap;\n}\n\n.todo-item {\n    display: flex;\n    border: 1px solid lightblue;\n    flex-flow: row wrap;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n    background: white;\n    cursor: pointer;\n}\n\n.todo-delete, .todo-edit, .todo-update, .todo-cancle-update {\n    color: #4a4a4a;\n    font-size: 1.5rem;\n}\n\n.todo-delete:hover, .todo-edit:hover, .todo-update:hover, .todo-cancle-update:hover {\n    color: white;\n    background: #fb886e;\n}\n\n.todo-content {\n    color: #cb1b45;\n    font-size: 1.5rem;\n}")
</response>

2019-01-02 06:36:02 >>> client 127.0.0.1:59055
2019-01-02 06:36:02 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/img/1.jpg")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'image/webp,image/apng,image/*,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/static?filename=todo.css', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:36:02 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (404)
    ("status_text"): ("Not Found")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>404</title>
</head>
<body>
    <h1>/img/1.jpg not found</h1>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:36:06 >>> client 127.0.0.1:59078
2019-01-02 06:36:06 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.css'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/css,*/*;q=0.1', 'referer': 'http://127.0.0.1:3001/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:36:06 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/css'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"main {\n    width: 50rem;\n    margin: auto;\n}\n\n.background {\n    position: absolute;\n    top: 0;\n    z-index: -1;\n    background: url('../img/1.jpg');\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n}\n\n.colck {\n    color: white;\n    position: fixed;\n    width: 15%;\n    height: 30%;\n    border: 2px dotted white;\n    border-radius: 50%;\n    top: 3%;\n    left: 4%;\n    text-shadow:0 0 0.2em white;\n}\n\n.time {\n    position: absolute;\n    left: 50%;\n    top: 45%;\n    transform: translateX(-50%);\n    font-size: 42px;\n    text-shadow:0 0 0.2em white;\n}\n\n\ndiv {\n    padding: 0.3rem;\n    margin: 0.3rem;\n}\n\n#id-div-todo-add-form {\n    text-align: center;\n}\n\n#id-input-todo-content {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    border: 1px solid #e2a8e4;\n    border-radius: 0.5rem;\n}\n\n#id-div-todo-list {\n    display: flex;\n    flex-flow: column wrap;\n}\n\n.todo-item {\n    display: flex;\n    border: 1px solid lightblue;\n    flex-flow: row wrap;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n    background: white;\n    cursor: pointer;\n}\n\n.todo-delete, .todo-edit, .todo-update, .todo-cancle-update {\n    color: #4a4a4a;\n    font-size: 1.5rem;\n}\n\n.todo-delete:hover, .todo-edit:hover, .todo-update:hover, .todo-cancle-update:hover {\n    color: white;\n    background: #fb886e;\n}\n\n.todo-content {\n    color: #cb1b45;\n    font-size: 1.5rem;\n}")
</response>

2019-01-02 06:39:26 >>> server http://127.0.0.1:3001/
2019-01-02 06:39:28 >>> client 127.0.0.1:59979
2019-01-02 06:39:28 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:28 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>

</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:39:28 >>> client 127.0.0.1:59980
2019-01-02 06:39:30 >>> client 127.0.0.1:59994
2019-01-02 06:39:30 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:30 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>注册</title>
</head>
<body>
    <h1>注册表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signup">注册</button>
    </div>

    <div id="id-div-signup-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
        <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signup()
    }

    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:39:30 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:30 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:39:30 >>> client 127.0.0.1:59996
2019-01-02 06:39:30 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:30 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:39:38 >>> client 127.0.0.1:60029
2019-01-02 06:39:38 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '35', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'gua', 'password': '123'})
</request>

2019-01-02 06:39:38 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 3, "created_time": 1546411178, "updated_time": 1546411178, "username": "gua", "password": "32ea32e793a5f4620ec30f14c0d5878368ef22f169e9ddb3e8a9870411266c22"}")
    ("data"): (b'')
</response>

2019-01-02 06:39:41 >>> client 127.0.0.1:60042
2019-01-02 06:39:41 >>> client 127.0.0.1:60043
2019-01-02 06:39:41 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:41 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>登录</title>
</head>
<body>
    <h1>登录表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signin">登录</button>
    </div>

    <div id="id-div-signin-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signin()
    }
    
    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:39:41 >>> client 127.0.0.1:60044
2019-01-02 06:39:41 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:41 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:39:41 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:39:41 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:39:46 >>> client 127.0.0.1:60072
2019-01-02 06:39:46 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '35', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'gua', 'password': '123'})
</request>

2019-01-02 06:39:46 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("body"): ("{"id": 2, "created_time": 1546410803, "updated_time": 1546410803, "username": "gua", "password": "32ea32e793a5f4620ec30f14c0d5878368ef22f169e9ddb3e8a9870411266c22"}")
    ("data"): (b'')
</response>

2019-01-02 06:39:49 >>> client 127.0.0.1:60085
2019-01-02 06:39:49 >>> client 127.0.0.1:60086
2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/todo/index")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> current user key cad433ce-5426-47e0-a430-5e76fb6ab039
2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>todo index</title>
    <link rel="stylesheet" href="/static?filename=todo.css">
</head>
<body>
    <main>
        <div id="id-div-todo-add-form">
            <input type="text" id="id-input-todo-content" placeholder="输入 todo 按回车添加">
        </div>

        <div id="id-div-todo-list">
        </div>
    </main>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=todo.js"></script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.css'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/css,*/*;q=0.1', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> client 127.0.0.1:60087
2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/css'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"main {\n    width: 50rem;\n    margin: auto;\n}\n\n.background {\n    position: absolute;\n    top: 0;\n    z-index: -1;\n    background: url('../img/1.jpg');\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n}\n\n.colck {\n    color: white;\n    position: fixed;\n    width: 15%;\n    height: 30%;\n    border: 2px dotted white;\n    border-radius: 50%;\n    top: 3%;\n    left: 4%;\n    text-shadow:0 0 0.2em white;\n}\n\n.time {\n    position: absolute;\n    left: 50%;\n    top: 45%;\n    transform: translateX(-50%);\n    font-size: 42px;\n    text-shadow:0 0 0.2em white;\n}\n\n\ndiv {\n    padding: 0.3rem;\n    margin: 0.3rem;\n}\n\n#id-div-todo-add-form {\n    text-align: center;\n}\n\n#id-input-todo-content {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    border: 1px solid #e2a8e4;\n    border-radius: 0.5rem;\n}\n\n#id-div-todo-list {\n    display: flex;\n    flex-flow: column wrap;\n}\n\n.todo-item {\n    display: flex;\n    border: 1px solid lightblue;\n    flex-flow: row wrap;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n    background: white;\n    cursor: pointer;\n}\n\n.todo-delete, .todo-edit, .todo-update, .todo-cancle-update {\n    color: #4a4a4a;\n    font-size: 1.5rem;\n}\n\n.todo-delete:hover, .todo-edit:hover, .todo-update:hover, .todo-cancle-update:hover {\n    color: white;\n    background: #fb886e;\n}\n\n.todo-content {\n    color: #cb1b45;\n    font-size: 1.5rem;\n}")
</response>

2019-01-02 06:39:49 >>> client 127.0.0.1:60088
2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b'const todoApi = {}\n\ntodoApi.add = (content, callback) => {\n    const todo = {\n        content: content\n    }\n    const path = \'/api/todo/add\'\n    postJSONRequest(path, todo, callback)\n}\n\ntodoApi.all = callback => {\n    const path = \'/api/todo/all\'\n    getJSONRequest(path, callback)\n}\n\ntodoApi.delete = (id, callback) => {\n    const path = `/api/todo/delete?id=${id}`\n    getJSONRequest(path, callback)\n}\n\ntodoApi.update = (id, content, callback) => {\n    const path = \'/api/todo/update\'\n    const todo = {\n        id: id,\n        content: content,\n    }\n\n    postJSONRequest(path, todo, callback)\n}\n\nconst todoView = {}\n\nconst templateTodo = (todo) => {\n    const t = `\n        <div class="todo-item" data-id="${todo.id}" data-content="${todo.content}">\n            <button class="todo-delete">\xe5\x88\xa0\xe9\x99\xa4</button>\n            <button class="todo-edit">\xe7\xbc\x96\xe8\xbe\x91</button>\n            <div class="todo-created-time">${dateTime(todo.created_time)}</div>\n            <div class="todo-content">${todo.content}</div>\n        </div>\n    `\n    return t\n}\n\ntodoView.add = (todo) => {\n    const html = templateTodo(todo)\n    appendHTML(\'#id-div-todo-list\', html)\n}\n\ntodoView.all = (todos) => {\n    for (const todo of todos) {\n        todoView.add(todo)\n    }\n}\n\ntodoView.delete = (todoItem) => {\n    todoItem.remove()\n}\n\nconst todoEvent = {}\n\ntodoEvent.add = () => {\n    bind(\'#id-input-todo-content\', \'keypress\', event => {\n        if (event.key == \'Enter\') {\n            const self = event.target\n            const content = self.value\n            todoApi.add(content, todo => todoView.add(todo))\n        }\n    })\n}\n\ntodoEvent.all = () => {\n    bind(document, \'DOMContentLoaded\', event => {\n        todoApi.all(todos => todoView.all(todos))\n    })\n}\n\ntodoEvent.delete = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-delete\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const id = todoItem.dataset.id\n        todoApi.delete(id, todo => {\n            todoView.delete(todoItem)\n        })\n    })\n}\n\nconst templateTodoUpdateForm = content => {\n    const t = `\n        <div class="todo-update-form">\n            <input type="text" class="todo-content" value="${content}">\n            <button class="todo-cancle-update">\xe5\x8f\x96\xe6\xb6\x88</button>\n            <button class="todo-update">\xe6\x9b\xb4\xe6\x96\xb0</button>\n        </div>\n    `\n    return t\n}\n\ntodoEvent.edit = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-edit\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoContentDiv = e(\'div.todo-content\', todoItem)\n        if (todoContentDiv != null) {\n            const html = templateTodoUpdateForm(content)\n            replaceHTML(todoContentDiv, html)\n        } else {\n            log(\'\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe7\x82\xb9\xe5\x87\xbb\xe7\xbc\x96\xe8\xbe\x91\xe6\x8c\x89\xe9\x92\xae\')\n        }\n    })\n}\n\nconst templateTodoContent = content => {\n    const t = `<div class="todo-content">${content}</div>`\n    return t\n}\n\ntodoEvent.cancleUpdate = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-cancle-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoUpdateForm = e(\'.todo-update-form\', todoItem)\n        const html = templateTodoContent(content)\n        replaceHTML(todoUpdateForm, html)\n    })\n}\n\ntodoEvent.update = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const contentInput = e(\'.todo-content\', todoItem)\n        const content = contentInput.value\n        const id = Number(todoItem.dataset.id)\n\n        todoApi.update(id, content, todo => {\n            const html = templateTodo(todo)\n            replaceHTML(todoItem, html)\n        })\n    })\n}\n\ntodoEvent.init = () => {\n    todoEvent.add()\n    todoEvent.all()\n    todoEvent.delete()\n    todoEvent.edit()\n    todoEvent.cancleUpdate()\n    todoEvent.update()\n}\n\nconst __main__ = () => {\n    todoEvent.init()\n}\n\n__main__()')
</response>

2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:39:49 >>> client 127.0.0.1:60089
2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/api/todo/all")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> current user key cad433ce-5426-47e0-a430-5e76fb6ab039
2019-01-02 06:39:49 >>> current user key cad433ce-5426-47e0-a430-5e76fb6ab039
2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("[]")
    ("data"): (b'')
</response>

2019-01-02 06:39:49 >>> client 127.0.0.1:60090
2019-01-02 06:39:49 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/img/1.jpg")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'image/webp,image/apng,image/*,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/static?filename=todo.css', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("cookie"): ({'key': 'cad433ce-5426-47e0-a430-5e76fb6ab039'})
    ("data"): (b'')
</request>

2019-01-02 06:39:49 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (404)
    ("status_text"): ("Not Found")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>404</title>
</head>
<body>
    <h1>/img/1.jpg not found</h1>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:46:46 >>> client 127.0.0.1:61350
2019-01-02 06:46:46 >>> client 127.0.0.1:61351
2019-01-02 06:46:46 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:46:46 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>主页</title>

</head>
<body>
    <nav>
        <ul>
            <li><a class="nav-item" href="/signin">登录</a></li>
            <li><a class="nav-item" href="/signup">注册</a></li>
        </ul>
    </nav>

    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>

    <style>
    .nav-item {
        font-size: 2rem;
        color: #cb1b45;
        text-decoration: none;
    }

    .nav-item:hover {
        color: white;
        background: #cb1b45;
    }

    ul {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        width: 15rem;
        margin: auto;
    }

    li {
        list-style: none;
    }
    </style>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:47:13 >>> client 127.0.0.1:61352
2019-01-02 06:47:13 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:13 >>> client 127.0.0.1:61353
2019-01-02 06:47:13 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>注册</title>
</head>
<body>
    <h1>注册表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signup">注册</button>
    </div>

    <div id="id-div-signup-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
        <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signup()
    }

    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:47:13 >>> client 127.0.0.1:61354
2019-01-02 06:47:13 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:13 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:13 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:47:13 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:47:20 >>> client 127.0.0.1:61355
2019-01-02 06:47:20 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signup")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '39', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'lambda', 'password': '1234'})
</request>

2019-01-02 06:47:20 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 4, "created_time": 1546411640, "updated_time": 1546411640, "username": "lambda", "password": "c0c343f5870c63e59ea38b5289d4ea28c475497338c859d419131a145beee5c9"}")
    ("data"): (b'')
</response>

2019-01-02 06:47:23 >>> client 127.0.0.1:61359
2019-01-02 06:47:23 >>> client 127.0.0.1:61360
2019-01-02 06:47:23 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/signup', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:23 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>登录</title>
</head>
<body>
    <h1>登录表单</h1>
    <div>
        <input type="text" id="id-input-username" placeholder="用户名">
        <input type="text" id="id-input-password" placeholder="密码">
        <button id="id-button-signin">登录</button>
    </div>

    <div id="id-div-signin-result"></div>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=user.js"></script>
    <script>
    const __main__ = () => {
        userEvent.signin()
    }
    
    __main__()
    </script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:47:23 >>> client 127.0.0.1:61361
2019-01-02 06:47:23 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'user.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:23 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const userApi = {}\n\nuserApi.signin = (username, password, callback) => {\n    const path = '/api/user/signin'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\n/*\n '/api/user/all': 'all',\n '/api/user/delete': 'delete',\n '/api/user/password/update': 'update_password',\n '/api/user/signin': 'signin',\n '/api/user/signup': 'signup',\n '/api/user/username/update': 'update_username',\n*/\n\nuserApi.signup = (username, password, callback) => {\n    const path = '/api/user/signup'\n    const user = {\n        username: username,\n        password: password,\n    }\n\n    postJSONRequest(path, user, callback)\n}\n\nconst userView = {}\n\nuserView.signin = () => {\n    const resultDiv = e('#id-div-signin-result')\n    resultDiv.innerText = '\xe7\x99\xbb\xe5\xbd\x95\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 todo \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/todo/index')\n}\n\nuserView.signup =() => {\n    const resultDiv = e('#id-div-signup-result')\n    resultDiv.innerText = '\xe6\xb3\xa8\xe5\x86\x8c\xe6\x88\x90\xe5\x8a\x9f 3 \xe7\xa7\x92\xe5\x90\x8e\xe8\xb7\xb3\xe8\xbd\xac\xe5\x88\xb0 \xe7\x99\xbb\xe5\xbd\x95 \xe4\xb8\xbb\xe9\xa1\xb5'\n    redirect('/signin')\n}\n\nconst userEvent = {}\n\nuserEvent.signin = () => {\n    bind('#id-button-signin', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signin(username, password, userView.signin)\n    })\n}\n\nuserEvent.signup = () => {\n    bind('#id-button-signup', 'click', event => {\n        const username = value('#id-input-username')\n        const password = value('#id-input-password')\n\n        userApi.signup(username, password, userView.signup)\n    })\n}\n")
</response>

2019-01-02 06:47:23 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): (b'')
</request>

2019-01-02 06:47:23 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:47:30 >>> client 127.0.0.1:61362
2019-01-02 06:47:30 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/user/signin")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '39', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9'})
    ("cookie"): ({})
    ("data"): ({'username': 'lambda', 'password': '1234'})
</request>

2019-01-02 06:47:30 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("body"): ("{"id": 4, "created_time": 1546411640, "updated_time": 1546411640, "username": "lambda", "password": "c0c343f5870c63e59ea38b5289d4ea28c475497338c859d419131a145beee5c9"}")
    ("data"): (b'')
</response>

2019-01-02 06:47:33 >>> client 127.0.0.1:61363
2019-01-02 06:47:33 >>> client 127.0.0.1:61364
2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/todo/index")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/signin', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>todo index</title>
    <link rel="stylesheet" href="/static?filename=todo.css">
</head>
<body>
    <main>
        <div id="id-div-todo-add-form">
            <input type="text" id="id-input-todo-content" placeholder="输入 todo 按回车添加">
        </div>

        <div id="id-div-todo-list">
        </div>
    </main>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
    <script src="/static?filename=utils.js"></script>
    <script src="/static?filename=todo.js"></script>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:47:33 >>> client 127.0.0.1:61365
2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.css'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'text/css,*/*;q=0.1', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'utils.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"const log = console.log.bind(console)\n\nconst initRequest = callback => {\n    const r = new XMLHttpRequest()\n    r.responseType = 'json'\n    r.onload = () => {\n        if (r.status == 200) {\n            callback(r.response)\n        }\n    }\n\n    return r\n}\n\nconst getJSONRequest = (path, callback) => {\n    const r = initRequest(callback)\n    r.open('GET', path)\n    r.send()\n}\n\nconst postJSONRequest = (path, data, callback) => {\n    const r = initRequest(callback)\n    r.open('POST', path)\n    r.setRequestHeader('Content-Type', 'application/json')\n    const body = JSON.stringify(data)\n    r.send(body)\n}\n\nconst e = (selector, element=document) => element.querySelector(selector)\n\nconst value = (selector, element=document) => {\n    const input = e(selector, element)\n    const v = input.value\n    return v\n}\n\nconst appendHTML = (selector, html) => {\n    const element = e(selector)\n    element.insertAdjacentHTML('beforeend', html)\n}\n\nconst replaceHTML = (element, html) => {\n    element.insertAdjacentHTML('afterend', html)\n    element.remove()\n}\n\nconst bind = (selector, eventType, callback) => {\n    if (typeof selector == 'string') {\n        const element = e(selector)\n        element.addEventListener(eventType, callback)\n    } else {\n        const element = selector\n        element.addEventListener(eventType, callback)\n    }\n}\n\nNumber.prototype.pad = function (width) {\n    let s = String(this)\n    s = s.padStart(width, '0')\n    return s\n}\n\nconst dateTime = (timestamp) => {\n    timestamp *= 1000\n    const d = new Date(timestamp)\n\n    // const yyyy = d.getFullYear()\n    // const mm = (d.getMonth() + 1).pad(2)\n    // const dd = d.getDate().pad(2)\n\n    const HH = d.getHours().pad(2)\n    const MM = d.getMinutes().pad(2)\n    const SS = d.getSeconds().pad(2)\n\n    // const dt = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`\n    const dt = `${HH}:${MM}:${SS}`\n\n    return dt\n}\n\nconst delegate = (selector, eventType, className, callback) => {\n    bind(selector, eventType, event => {\n        const self = event.target\n        if (self.classList.contains(className)) {\n            callback(event)\n        }\n    })\n}\n\nconst redirect = path => {\n    setTimeout(() => {\n        location.href = path\n    }, 3000)\n}")
</response>

2019-01-02 06:47:33 >>> client 127.0.0.1:61366
2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/static")
    ("query"): ({'filename': 'todo.js'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'text/css'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b"main {\n    width: 50rem;\n    margin: auto;\n}\n\n.background {\n    position: absolute;\n    top: 0;\n    z-index: -1;\n    background: url('../img/1.jpg');\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n}\n\n.colck {\n    color: white;\n    position: fixed;\n    width: 15%;\n    height: 30%;\n    border: 2px dotted white;\n    border-radius: 50%;\n    top: 3%;\n    left: 4%;\n    text-shadow:0 0 0.2em white;\n}\n\n.time {\n    position: absolute;\n    left: 50%;\n    top: 45%;\n    transform: translateX(-50%);\n    font-size: 42px;\n    text-shadow:0 0 0.2em white;\n}\n\n\ndiv {\n    padding: 0.3rem;\n    margin: 0.3rem;\n}\n\n#id-div-todo-add-form {\n    text-align: center;\n}\n\n#id-input-todo-content {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    border: 1px solid #e2a8e4;\n    border-radius: 0.5rem;\n}\n\n#id-div-todo-list {\n    display: flex;\n    flex-flow: column wrap;\n}\n\n.todo-item {\n    display: flex;\n    border: 1px solid lightblue;\n    flex-flow: row wrap;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n    background: white;\n    cursor: pointer;\n}\n\n.todo-delete, .todo-edit, .todo-update, .todo-cancle-update {\n    color: #4a4a4a;\n    font-size: 1.5rem;\n}\n\n.todo-delete:hover, .todo-edit:hover, .todo-update:hover, .todo-cancle-update:hover {\n    color: white;\n    background: #fb886e;\n}\n\n.todo-content {\n    color: #cb1b45;\n    font-size: 1.5rem;\n}")
</response>

2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/javascript'})
    ("cookie"): ({})
    ("body"): ("")
    ("data"): (b'const todoApi = {}\n\ntodoApi.add = (content, callback) => {\n    const todo = {\n        content: content\n    }\n    const path = \'/api/todo/add\'\n    postJSONRequest(path, todo, callback)\n}\n\ntodoApi.all = callback => {\n    const path = \'/api/todo/all\'\n    getJSONRequest(path, callback)\n}\n\ntodoApi.delete = (id, callback) => {\n    const path = `/api/todo/delete?id=${id}`\n    getJSONRequest(path, callback)\n}\n\ntodoApi.update = (id, content, callback) => {\n    const path = \'/api/todo/update\'\n    const todo = {\n        id: id,\n        content: content,\n    }\n\n    postJSONRequest(path, todo, callback)\n}\n\nconst todoView = {}\n\nconst templateTodo = (todo) => {\n    const t = `\n        <div class="todo-item" data-id="${todo.id}" data-content="${todo.content}">\n            <button class="todo-delete">\xe5\x88\xa0\xe9\x99\xa4</button>\n            <button class="todo-edit">\xe7\xbc\x96\xe8\xbe\x91</button>\n            <div class="todo-created-time">${dateTime(todo.created_time)}</div>\n            <div class="todo-content">${todo.content}</div>\n        </div>\n    `\n    return t\n}\n\ntodoView.add = (todo) => {\n    const html = templateTodo(todo)\n    appendHTML(\'#id-div-todo-list\', html)\n}\n\ntodoView.all = (todos) => {\n    for (const todo of todos) {\n        todoView.add(todo)\n    }\n}\n\ntodoView.delete = (todoItem) => {\n    todoItem.remove()\n}\n\nconst todoEvent = {}\n\ntodoEvent.add = () => {\n    bind(\'#id-input-todo-content\', \'keypress\', event => {\n        if (event.key == \'Enter\') {\n            const self = event.target\n            const content = self.value\n            todoApi.add(content, todo => todoView.add(todo))\n        }\n    })\n}\n\ntodoEvent.all = () => {\n    bind(document, \'DOMContentLoaded\', event => {\n        todoApi.all(todos => todoView.all(todos))\n    })\n}\n\ntodoEvent.delete = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-delete\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const id = todoItem.dataset.id\n        todoApi.delete(id, todo => {\n            todoView.delete(todoItem)\n        })\n    })\n}\n\nconst templateTodoUpdateForm = content => {\n    const t = `\n        <div class="todo-update-form">\n            <input type="text" class="todo-content" value="${content}">\n            <button class="todo-cancle-update">\xe5\x8f\x96\xe6\xb6\x88</button>\n            <button class="todo-update">\xe6\x9b\xb4\xe6\x96\xb0</button>\n        </div>\n    `\n    return t\n}\n\ntodoEvent.edit = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-edit\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoContentDiv = e(\'div.todo-content\', todoItem)\n        if (todoContentDiv != null) {\n            const html = templateTodoUpdateForm(content)\n            replaceHTML(todoContentDiv, html)\n        } else {\n            log(\'\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe7\x82\xb9\xe5\x87\xbb\xe7\xbc\x96\xe8\xbe\x91\xe6\x8c\x89\xe9\x92\xae\')\n        }\n    })\n}\n\nconst templateTodoContent = content => {\n    const t = `<div class="todo-content">${content}</div>`\n    return t\n}\n\ntodoEvent.cancleUpdate = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-cancle-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const content = todoItem.dataset.content\n        const todoUpdateForm = e(\'.todo-update-form\', todoItem)\n        const html = templateTodoContent(content)\n        replaceHTML(todoUpdateForm, html)\n    })\n}\n\ntodoEvent.update = () => {\n    delegate(\'#id-div-todo-list\', \'click\', \'todo-update\', event => {\n        const self = event.target\n        const todoItem = self.closest(\'.todo-item\')\n        const contentInput = e(\'.todo-content\', todoItem)\n        const content = contentInput.value\n        const id = Number(todoItem.dataset.id)\n\n        todoApi.update(id, content, todo => {\n            const html = templateTodo(todo)\n            replaceHTML(todoItem, html)\n        })\n    })\n}\n\ntodoEvent.init = () => {\n    todoEvent.add()\n    todoEvent.all()\n    todoEvent.delete()\n    todoEvent.edit()\n    todoEvent.cancleUpdate()\n    todoEvent.update()\n}\n\nconst __main__ = () => {\n    todoEvent.init()\n}\n\n__main__()')
</response>

2019-01-02 06:47:33 >>> client 127.0.0.1:61367
2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/api/todo/all")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:33 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:33 >>> client 127.0.0.1:61368
2019-01-02 06:47:33 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/img/1.jpg")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': 'image/webp,image/apng,image/*,*/*;q=0.8', 'referer': 'http://127.0.0.1:3001/static?filename=todo.css', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("[]")
    ("data"): (b'')
</response>

2019-01-02 06:47:33 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (404)
    ("status_text"): ("Not Found")
    ("headers"): ({'Content-Type': 'text/html; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>404</title>
</head>
<body>
    <h1>/img/1.jpg not found</h1>
    <div class="colck">
            <div class="time"></div>
    </div>
    <div class="background"></div>
</body>
</html>")
    ("data"): (b'')
</response>

2019-01-02 06:47:39 >>> client 127.0.0.1:61369
2019-01-02 06:47:39 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/todo/add")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '20', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): ({'content': '吃饭'})
</request>

2019-01-02 06:47:39 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:39 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:39 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 1, "created_time": 1546411659, "updated_time": 1546411659, "content": "\u5403\u996d", "user_id": 4}")
    ("data"): (b'')
</response>

2019-01-02 06:47:44 >>> client 127.0.0.1:61370
2019-01-02 06:47:44 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/todo/add")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '20', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): ({'content': '休息'})
</request>

2019-01-02 06:47:44 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:44 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:44 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 2, "created_time": 1546411664, "updated_time": 1546411664, "content": "\u4f11\u606f", "user_id": 4}")
    ("data"): (b'')
</response>

2019-01-02 06:47:46 >>> client 127.0.0.1:61371
2019-01-02 06:47:46 >>> request 
<request>
    ("method"): ("GET")
    ("path"): ("/api/todo/delete")
    ("query"): ({'id': '2'})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): (b'')
</request>

2019-01-02 06:47:46 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:46 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:46 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 2, "created_time": 1546411664, "updated_time": 1546411666, "content": "\u4f11\u606f", "user_id": 4}")
    ("data"): (b'')
</response>

2019-01-02 06:47:53 >>> client 127.0.0.1:61372
2019-01-02 06:47:53 >>> request 
<request>
    ("method"): ("POST")
    ("path"): ("/api/todo/update")
    ("query"): ({})
    ("protocol"): ("HTTP/1.1")
    ("headers"): ({'host': '127.0.0.1:3001', 'connection': 'keep-alive', 'content-length': '27', 'origin': 'http://127.0.0.1:3001', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'content-type': 'application/json', 'accept': '*/*', 'referer': 'http://127.0.0.1:3001/todo/index', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.9', 'cookie': 'key=4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("cookie"): ({'key': '4842cc78-dc1e-4c87-af6d-cf1c666d8dd1'})
    ("data"): ({'id': 1, 'content': '睡觉'})
</request>

2019-01-02 06:47:53 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:53 >>> current user key 4842cc78-dc1e-4c87-af6d-cf1c666d8dd1
2019-01-02 06:47:53 >>> response 
<response>
    ("protocol"): ("HTTP/1.1")
    ("status"): (200)
    ("status_text"): ("OK")
    ("headers"): ({'Content-Type': 'application/json; charset=utf-8'})
    ("cookie"): ({})
    ("body"): ("{"id": 1, "created_time": 1546411659, "updated_time": 1546411673, "content": "\u7761\u89c9", "user_id": 4}")
    ("data"): (b'')
</response>

